'.source.ts':
  'Angular import in *.ts':
    'prefix': 'imp_ts'
    'description': 'Angular import (basic, default)'
    'body': """
     import { ${2:^^^^^^^^^^} } from '${1:^^^^^^^^^^}';
     $3
     """

  'Angular import module (that exports all of these) in *.ts':
    'prefix': 'imp_ts_m'
    'description': 'Angular import modules'
    'body': """
     import { ${2:^^^^^^^^^^} } from '..$1/index.module';
     $3
     """

  'Angular import component in *.ts':
    'prefix': 'imp_ts_components'
    'description': 'Angular import (components)'
    'body': """
     import { ${4:^^^^^^^^^^} } from '.$3/components$2/${1:^^^^^^^^^^}.component';
     $5
     """

  'Angular import components (that exports all of these) in *.ts':
    'prefix': 'imp_ts_c'
    'description': 'Angular import components'
    'body': """
     import { ${2:^^^^^^^^^^} } from '..$1/index.component';
     $3
     """

  'Angular import service in *.ts':
    'prefix': 'imp_ts_services'
    'description': 'Angular import (services)'
    'body': """
     import { ${4:^^^^^^^^^^} } from '.$3/services$2/${1:^^^^^^^^^^}.service';
     $5
     """

  'Angular import service (that exports all of these) in *.ts':
    'prefix': 'imp_ts_s'
    'description': 'Angular import services'
    'body': """
     import { ${2:^^^^^^^^^^} } from '..$1/index.service';
     $3
     """

  'Angular import interface in *.ts':
    'prefix': 'imp_ts_interfaces'
    'description': 'Angular import (interfaces)'
    'body': """
     import { ${4:^^^^^^^^^^} } from '.$3/interfaces$2/${1:^^^^^^^^^^}.interface';
     $5
     """

  'Angular import pipe in *.ts':
    'prefix': 'imp_ts_pipes'
    'description': 'Angular import (pipes)'
    'body': """
     import { ${4:^^^^^^^^^^} } from '.$3/pipes$2/${1:^^^^^^^^^^}.pipe';
     $5
     """

  'Angular import all in *.ts':
    'prefix': 'imp_ts-all'
    'description': 'Angular import (Import an entire module is contents.)'
    'body': """
     import * as ${2:^^^^^^^^^^} from '${1:^^^^^^^^^^}';
     $3
     """

  'Angular import map in *.ts':
    'prefix': 'imp_ts-RxJS_map'
    'description': 'angular import (map)'
    'body': """
    import 'rxjs/add/operator/map'; /*or ( ... rxjs/Rx ); map it to a JSON (_res.json()) */
    $1
    """

  'Angular import RxJS (Observable) in *.ts':
    'prefix': 'imp_ts-RxJS_Observable'
    'description': 'Angular import (Observable)'
    'body': """
    import { Observable } from 'rxjs/Rx'; /* or ( ... rxjs/Observable ) */
    $1
    """

  'Angular import router (routes all) in *.ts':
    'prefix': 'imp_ts-router'
    'description': 'Angular import (routes all)'
    'body': """

     /* routes, Know where the page you are and where you want to move, see the state in which it is, going to say that you can activate that route or not (implements in class)... */
     import { Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from '@angular/router';
     $1
     """

  'Angular import all form (template) in *.ts':
    'prefix': 'imp_ts-forms_tml'
    'description': 'Angular import Forms (all x Template)'
    'body': """

    /* Note: Need import and imports FormsModule in file module (~.module.ts) or ignore this message. */
    import { NgForm } from '@angular/forms';
    $1
    """

  'Angular import all form (data) in *.ts':
    'prefix': 'imp_ts-forms_data'
    'description': 'Angular import Forms (all x Data)'
    'body': """

     /* Note: Need import and imports FormsModule and ReactiveFormsModule in file module (~.module.ts) or ignore this message. */
     import { FormGroup, FormControl, FormArray, Validators } from '@angular/forms';
     $1
     """

  'Angular import all http in *.ts':
    'prefix': 'imp_ts-http'
    'description': 'Angular import (http, headers, options and res)'
    'body': """
     import { Http, Headers, RequestOptions, Response } from '@angular/http'; /* Note: http, headers, options and res work in a service (~.service.ts) or ignore this message. */
     $1
     """

  'Angular import animations in *.ts':
    'prefix': 'imp_ts-animations'
    'description': 'Angular import (trigger, state, style, animate, transition)'
    'body': """
     /* Note: Need import and imports BrowserAnimationsModule in file module (~.module.ts) or ignore this message. */
     import { trigger, state, style, animate, transition } from '@angular/animations';
     $1
     """

  'Angular import angularfire2 in *.ts':
    'prefix': 'imp_ts-ngfire2'
    'description': 'Angular import (AngularFire and FirebaseListObservable)'
    'body': """
     import { AngularFire, FirebaseListObservable } from 'angularfire2';
     $1
     """

  'Angular export in *.ts':
    'prefix': 'exp_ts'
    'description': 'Angular export (basic, default)'
    'body': """
     export { ${2:^^^^^^^^^^} } from '${1:^^^^^^^^^^}';
     $3
     """

  'Angular export class in *.ts':
    'prefix': 'exp_ts-class'
    'description': 'Angular export class'
    'body': """
     export class ${1:^^^^^^^^^^} {
       $2
     }

     """


  'Angular export data in *.ts':
    'prefix': 'exp_ts-const'
    'description': 'Angular export const'
    'body': """
    export const ${1:^^^^^^^^^^} = [
      {
        $2
      }
    ];
    """

  'Angular export class implements in *.ts':
    'prefix': 'exp_ts-class_impl'
    'description': 'Angular export class + implements (methods)'
    'body': """
     export class ${1:^^^^^^^^^^} implements ${2:^^^^^^^^^^} {
       $3
     }

     """

  'Angular export interface in *.ts':
    'prefix': 'exp_ts-intf'
    'description': 'Angular export interface'
    'body': """
     export interface ${1:^^^^^^^^^^} {
       $2
     }

     """

  'Angular Component':
    'prefix': 'ng-c'
    'description': 'Angular Component (modify:^^^^^^^^^^)'
    'body': """
    import { Component } from '@angular/core';

    @Component({
      selector: '${1:^^^^^^^^^^}',
      templateUrl: './${2:^^^^^^^^^^}.component.html',
      styleUrls: [ './${2:^^^^^^^^^^}.component.css' ],
      animations: [  ]
    })
    export class ${3:^^^^^^^^^^}Component {
      /* Note: import + declarations in file module (~.module.ts) or ignore this message. */
      $5
      constructor(  ){ $4 }

    }
    """

  'Angular Component Basic':
    'prefix': 'ng-c_lite'
    'description': 'Angular Component Basic (modify:^^^^^^^^^^)'
    'body': """
    import { Component } from '@angular/core';

    @Component({
      selector: '${1:^^^^^^^^^^}',
      template: `
        $6
      `,
      styles: [ ` $7 ` ],
      animations: [  ]
    })
    export class ${3:^^^^^^^^^^}Component {
      /* Note: import + declarations in file module (~.module.ts) or ignore this message. */
      $5
      constructor(  ){ $4 }

    }
    """

  'Angular Routes':
    'prefix': 'ng-rt'
    'description': 'Angular Routes (modify:^^^^^^^^^^)'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/guide/router.html'
    'body': """
    import { RouterModule, Routes } from '@angular/router';

    /* Components */
    import { ${2:^^^^^^^^^^} } from '${1:^^^^^^^^^^}';

    const NAV_ROUTES: Routes = [
      { path: '${3:^^^^^^^^^^}', component: ${2:^^^^^^^^^^} },
      { path: '**', pathMatch:'full', redirectTo: '${3:^^^^^^^^^^}' }

    ];

    export const app_routing = RouterModule.forRoot( NAV_ROUTES );
    /* Note:
      * add tag <router-outlet></router-outlet> in file component (~.component.html)
      * Need import and imports `app_routing`  in file module (~.module.ts) or ignore this message. */
      $4
    """

  'Angular Service':
    'prefix': 'ng-s'
    'description': 'Angular Service (modify:^^^^^^^^^^)'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/tutorial/toh-pt4.html'
    'body': """
    import { Injectable } from '@angular/core';
    $2
    @Injectable()
    export class ${1:^^^^^^^^^^}Service {
      /* Note: import + providers in file module (~.module.ts) or ignore this message. */
      constructor( $3 ){  }
      $4
    }
    """

  'Angular Pipe':
    'prefix': 'ng-pipe'
    'description': 'Angular PIPES (modify:^^^^^^^^^^)'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/guide/pipes.html'
    'body': """
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
      name: '${1:^^^^^^^^^^}'
    })
    export class ${1:^^^^^^^^^^}Pipe implements PipeTransform {
      /* Note: import + declarations in file module (~.module.ts) or ignore this message. */
      constructor(  ){  }

      transform( ${3:^^^^^^^^^^}: ${2:^^^^^^^^^^}, args: any[] ): ${2:^^^^^^^^^^} {
        return $4;
      }

    }

    """

  'Angular Directive':
    'prefix': 'ng-d'
    'description': 'Angular Directive (modify:^^^^^^^^^^)'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/guide/structural-directives.html'
    'body': """
    import { Directive, Input } from '@angular/core';

    @Directive({ selector: '[${1:^^^^^^^^^^}]' })
    export class ${2:^^^^^^^^^^}Directive {

      $4

      constructor(  ){  }

      @Input(  ) set ${1:^^^^^^^^^^} ( ${3:^^^^^^^^^^}: boolean ) {
        $5
      }

      /* Note: import + declarations in file module (~.module.ts) or ignore this message. */
    }

    """

  'Angular const FormGroup':
    'prefix': 'ng-new-FormGroup'
    'description': 'Angular Class FormGroup (STABLE) (modify:^^^^^^^^^^)'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html'
    'body': """
    const ${1:^^^^^^^^^^} = new FormGroup({
      ${2:^^^^^^^^^^}: new FormControl( '${3:^^^^^^^^^^}' ),
      ${4:^^^^^^^^^^}: new FormControl( '', Validators.${5:^^^^^^^^^^} ),
      ${6:^^^^^^^^^^}: new FormArray([
                        new FormControl ( '', Validators.${7:^^^^^^^^^^})
                       ])
    });
    /* Note: add he FormControlName (the values ${2:^^^^^^^^^^}" and "${4:^^^^^^^^^^}", etc ... ) in tag input (~.component.html)
             add he FormArrayName ( ${6:^^^^^^^^^^}", etc ... ) in a tag what container he tag input (~.component.html) */
    $8
    """

  'Angular response object (to .map())':
    'prefix': 'ng-meth_extractData'
    'description': 'Angular - response object'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/guide/server-communication.html#!#extract-data'
    'body': """
    private extractData(res: Response) {
      let body = res.json();
      return body.data ||  { };
      /* In the above snippet we are transforming response to the json format by doing res.json().
       *? Make no assumptions about the server API. Not all servers return an object with a data property.*/
    }
    """


  'Angular handle errors (to .catch())':
    'prefix': 'ng-meth_handleError'
    'description': 'Angular - error handling'
    'descriptionMoreURL': 'https://angular.io/docs/ts/latest/guide/server-communication.html#!#error-handling'
    'body': """
    private handleError(error: any) {
      /* In a real world app, we might use a remote logging infrastructure.
       * We'd also dig deeper into the error to get a better message */
      let errMsg = (error.message) ? error.message :
          error.status ? `${error.status} - ${error.statusText}` : 'Server error';
      console.error(errMsg); /*log to console instead*/
      return Promise.reject(errMsg);
      // return Observable.throw(errMsg);
    }
    """
